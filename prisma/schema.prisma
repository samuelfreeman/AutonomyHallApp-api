// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// the admin that assigns a room to the student  and overlooks the application
model admin {
  id        String   @id @default(uuid())
  fullname  String
  email     String   @unique
  password  String
  telephone String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model student {
  id          String       @id @default(uuid())
  studentId   String       @unique
  profile     String
  fullName    String
  email       String?
  password    String
  gender      String
  level       Int
  telephone   String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  department  String?
  allocation  allocation?
  hall        hall?        @relation(fields: [hallId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  hallId      String?
  roomRequest roomRequest?
}

model allocation {
  id        String   @id @default(uuid())
  student   student  @relation(fields: [studentId], references: [studentId])
  studentId String   @unique
  rooms     rooms    @relation(fields: [roomsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roomsId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model rooms {
  id                  String       @id @default(uuid())
  roomnumber          Int          @unique
  status              status
  blockName           String
  createdAt           DateTime     @default(now())
  allocation          allocation[]
  numberOfAllocations Int          @default(0)
  hall                hall?        @relation(fields: [hallId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  hallId              String?
}

model roomRequest {
  id        String   @id @default(uuid())
  student   student  @relation(fields: [StudentId], references: [studentId], onDelete: Cascade, onUpdate: Cascade)
  StudentId String   @unique
  status    options
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model hall {
  id        String    @id @default(uuid())
  name      String
  location  String
  student   student[]
  rooms     rooms[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum status {
  Vacant
  Occupied
  Partially_Occupied
}

enum options {
  Rejected
  Approved
  Pending
}
